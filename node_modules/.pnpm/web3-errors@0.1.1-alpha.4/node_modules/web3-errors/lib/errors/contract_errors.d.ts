import { JsonRpcError, TransactionReceipt, HexString } from 'web3-types';
import { Web3Error } from '../web3_error_base';
export declare class Web3ContractError extends Web3Error {
    code: number;
    receipt?: TransactionReceipt;
    constructor(message: string, receipt?: TransactionReceipt);
}
export declare class ResolverMethodMissingError extends Web3Error {
    address: string;
    name: string;
    code: number;
    constructor(address: string, name: string);
    toJSON(): {
        address: string;
        name: string;
        code: number;
        message: string;
        innerError: Error | Error[] | undefined;
    };
}
export declare class ContractMissingABIError extends Web3Error {
    code: number;
    constructor();
}
export declare class ContractOnceRequiresCallbackError extends Web3Error {
    code: number;
    constructor();
}
export declare class ContractEventDoesNotExistError extends Web3Error {
    eventName: string;
    code: number;
    constructor(eventName: string);
    toJSON(): {
        eventName: string;
        name: string;
        code: number;
        message: string;
        innerError: Error | Error[] | undefined;
    };
}
export declare class ContractReservedEventError extends Web3Error {
    type: string;
    code: number;
    constructor(type: string);
    toJSON(): {
        type: string;
        name: string;
        code: number;
        message: string;
        innerError: Error | Error[] | undefined;
    };
}
export declare class ContractMissingDeployDataError extends Web3Error {
    code: number;
    constructor();
}
export declare class ContractNoAddressDefinedError extends Web3Error {
    code: number;
    constructor();
}
export declare class ContractNoFromAddressDefinedError extends Web3Error {
    code: number;
    constructor();
}
export declare class ContractInstantiationError extends Web3Error {
    code: number;
}
export declare class Eip838ExecutionError extends Web3ContractError {
    readonly name: string;
    code: number;
    data?: HexString;
    errorName?: string;
    errorSignature?: string;
    errorArgs?: {
        [K in string]: unknown;
    };
    constructor(code: number, message: string, data?: HexString);
    setDecodedProperties(errorName: string, errorSignature?: string, errorArgs?: {
        [K in string]: unknown;
    }): void;
}
export declare class ContractExecutionError extends Web3ContractError {
    innerError: Eip838ExecutionError;
    constructor(rpcError: JsonRpcError);
}
//# sourceMappingURL=contract_errors.d.ts.map